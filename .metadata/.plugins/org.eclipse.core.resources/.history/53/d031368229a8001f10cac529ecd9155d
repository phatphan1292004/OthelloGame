package main;

import java.util.List;

public class BOT {
	private Board board;

	public BOT(Board board) {
		this.board = board;
	}

	// Đánh giá bàn cờ
	public int evaluateBoard() {
		int blackCount = board.countTileInBoard(1);
		int whiteCount = board.countTileInBoard(-1);
		return blackCount - whiteCount;
	}

	// minimax
	public int minimax(int depth, boolean isMaximizingPlayer) {
		// Khi game ket thuc -> danh gia ban co
		if (depth == 0 || board.isGameOver()) {
			return evaluateBoard(); 
		}

		// Neu la luot cua ai
		if (isMaximizingPlayer) {
			int maxEval = Integer.MIN_VALUE;
			List<int[]> validMoves = board.getValidMoves(-1); // AI chơi quân trắng (-1)
			for (int[] move : validMoves) {
				board.setState(move[0], move[1], -1); // Đặt quân của AI
				int eval = minimax(depth - 1, false); // Đệ quy với lượt của đối thủ
				maxEval = Math.max(maxEval, eval); // Cập nhật giá trị tối đa
				board.setState(move[0], move[1], 0); // Hoàn tác nước đi
			}
			return maxEval;
		} else {
			// Nếu là lượt của đối thủ (minimizing player)
			int minEval = Integer.MAX_VALUE;
			List<int[]> validMoves = board.getValidMoves(1); // Đối thủ chơi quân đen (1)
			for (int[] move : validMoves) {
				board.setState(move[0], move[1], 1); // Đặt quân của đối thủ
				int eval = minimax(depth - 1, true); // Đệ quy với lượt của AI
				minEval = Math.min(minEval, eval); // Cập nhật giá trị tối thiểu
				board.setState(move[0], move[1], 0); // Hoàn tác nước đi
			}
			return minEval;
		}
	}
	
	public int[] getBestMove() {
        int bestMoveValue = Integer.MIN_VALUE;
        int[] bestMove = null;

        List<int[]> validMoves = board.getValidMoves(-1);  // AI chơi quân trắng
        for (int[] move : validMoves) {
            board.setState(move[0], move[1], -1);  // Đặt quân của AI
            int moveValue = minimax(3, false);  // Gọi Minimax với độ sâu 3
            if (moveValue > bestMoveValue) {
                bestMoveValue = moveValue;  // Cập nhật giá trị tốt nhất
                bestMove = move;  // Cập nhật nước đi tốt nhất
            }
            board.setState(move[0], move[1], 0);  // Hoàn tác nước đi
        }

        return bestMove;  // Trả về nước đi tốt nhất
    }
}
