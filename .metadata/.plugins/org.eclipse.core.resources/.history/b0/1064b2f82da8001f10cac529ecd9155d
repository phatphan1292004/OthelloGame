package main;

import java.util.List;

public class BOT {
    private Board board;

    public BOT(Board board) {
        this.board = board;
    }

    public int evaluateBoard() {
        int score = 0;
        int color = board.getTurn();  // Màu của người chơi hiện tại

        // Đánh giá các ô cạnh và góc
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                int piece = board.getState(i, j);  // Lấy quân cờ tại (i, j)

                // Cộng điểm cho quân của người chơi
                score += piece * color;

                // Cộng thêm điểm cho quân cờ ở cạnh và góc
                if (board.isSide(i, j)) {
                    score += 10 * piece * color;  // Cạnh bàn cờ
                }

                if (board.isCorner(i, j)) {
                    score += 40 * piece * color;  // Góc bàn cờ
                }
            }
        }

        // Cộng thêm điểm cho mỗi nước đi hợp lệ
        score += board.getValidMoves().size() * 5;

        return score;
    }


    // Minimax thuật toán đệ quy
    public int minimax(int depth, boolean isMaximizingPlayer) {
        if (depth == 0 || board.isGameOver()) {
            return evaluateBoard();
        }

        if (isMaximizingPlayer) {
            int maxEval = Integer.MIN_VALUE;
            List<int[]> validMoves = board.getValidMoves(-1);  // AI chơi quân trắng
            for (int[] move : validMoves) {
                board.setState(move[0], move[1], -1);  // Đặt quân của AI
                int eval = minimax(depth - 1, false);  // Đệ quy với lượt của đối thủ
                maxEval = Math.max(maxEval, eval);  // Cập nhật giá trị tối đa
                board.setState(move[0], move[1], 0);  // Hoàn tác nước đi
            }
            return maxEval;
        } else {
            int minEval = Integer.MAX_VALUE;
            List<int[]> validMoves = board.getValidMoves(1);  // Đối thủ chơi quân đen
            for (int[] move : validMoves) {
                board.setState(move[0], move[1], 1);  // Đặt quân của đối thủ
                int eval = minimax(depth - 1, true);  // Đệ quy với lượt của AI
                minEval = Math.min(minEval, eval);  // Cập nhật giá trị tối thiểu
                board.setState(move[0], move[1], 0);  // Hoàn tác nước đi
            }
            return minEval;
        }
    }

    // Tìm nước đi tốt nhất cho AI
    public int[] getBestMove() {
        int bestMoveValue = Integer.MIN_VALUE;
        int[] bestMove = null;

        List<int[]> validMoves = board.getValidMoves(-1);  // AI chơi quân trắng
        for (int[] move : validMoves) {
            board.setState(move[0], move[1], -1);  // Đặt quân của AI
            int moveValue = minimax(3, false);  // Gọi Minimax với độ sâu 3
            if (moveValue > bestMoveValue) {
                bestMoveValue = moveValue;  // Cập nhật giá trị tốt nhất
                bestMove = move;  // Cập nhật nước đi tốt nhất
            }
            board.setState(move[0], move[1], 0);  // Hoàn tác nước đi
        }

        return bestMove;  // Trả về nước đi tốt nhất
    }
}
